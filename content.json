{"meta":{"title":"蓝书签","subtitle":"博客","description":"记录知识的获取","author":"杨耀","url":"https://bluebookmarks.github.io","root":"/"},"pages":[{"title":"","date":"2019-12-24T08:57:17.395Z","updated":"2019-12-24T08:57:17.395Z","comments":false,"path":"tags/index.html","permalink":"https://bluebookmarks.github.io/tags/index.html","excerpt":"","text":""},{"title":"404 该页面无法找到","date":"2019-12-25T03:25:03.457Z","updated":"2019-12-25T03:25:03.457Z","comments":true,"path":"404.html","permalink":"https://bluebookmarks.github.io/404.html","excerpt":"","text":""}],"posts":[{"title":"react-router","slug":"react-router","date":"2019-12-25T02:43:12.000Z","updated":"2019-12-25T03:00:28.541Z","comments":true,"path":"2019/12/25/react-router/","link":"","permalink":"https://bluebookmarks.github.io/2019/12/25/react-router/","excerpt":"React Router 是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。","text":"React Router 是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。 目录react-router-dom 安装react-router-dom 使用react-router-dom 使用嵌套路由 react-router-domreact-router-dom 是 react-router v4 的 web 版本 v4 和 v2, v3的区别为 v4版本把路由拆分为组件的形式可在各个模块中调用 v2/v3 123456&lt;Router history=&#123;browserHistory&#125;&gt; &lt;Route path=\"/\" component=&#123;Home&#125;&gt; &lt;IndexRoute component=&#123;HomePage&#125; /&gt; &lt;Route path=\"/users\" component=&#123;UsersPage&#125; /&gt; &lt;/Route&gt;&lt;/Router&gt; v4 123456789101112&#123;/* App.js */&#125;&lt;BrowserRouter&gt; &lt;Home /&gt;&lt;/BrowserRouter&gt;&#123;/* Home.js */&#125;&lt;div&gt; &lt;div className=\"pages\"&gt;page: &lt;Route path=\"/\" exact component=&#123;HomePage&#125; /&gt; &lt;Route path=\"/users\" component=&#123;UsersPage&#125; /&gt; &lt;/div&gt;&lt;/div&gt; 1. 安装react-router-dom命令 yarn add react-router-dom --dev || npm i react-router-dom -S 2. 使用react-router-dom12345678910111213141516171819202122232425262728293031323334import React from 'react'import &#123; BrowserRouter as Router, Route, Link, Switch, Redirect&#125; from 'react-router-dom'import Index from './pages/Index'import Other from './pages/Other'const App = () =&gt; ( &lt;Router&gt; &lt;div className=\"App\"&gt; 点击位置： &lt;ul&gt; &#123;/* link 跳转标签 */&#125; &lt;li&gt;&lt;Link to=\"/\"&gt;首页&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=\"/other\"&gt;其他&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; 当前页面： &#123;/* Switch 只渲染一个路由 */&#125; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" component=&#123; Other &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/Router&gt;)export default App v4 版本则有了一个包含的关系：如匹配 path=”/users” 的路由会匹配 path=”/“的路由，在页面中这两个模块会同时进行渲染。因此，v4中多了 exact 关键词，表示只对当前的路由进行匹配 &lt;Switch&gt;只有一个路由会被渲染，并且总是渲染第一个匹配到的组件。（PS: 在第一个路由中，还是需要使用 exact，否则，当我们渲染 ‘/other’ 或 ‘/other/page’ 时，只会显示匹配 ‘/‘ 的组件。） &lt;Redirect&gt; 组件，单独使用时，一旦当路由匹配到的时候，浏览器就会进行重定向跳转；而配合 &lt;Switch&gt; 使用时，只有当没有路由匹配的时候，才会进行重定向。 （eg： 跳转-&gt; /error 未定义重定向 -&gt; /） v4版本废弃掉&lt;IndexRoute&gt;使用&lt;Route&gt;中的exact关键词代替 3. 使用嵌套路由第一种方式（不推荐） 这种方式很冗余，渲染时要把整体通用部分重复渲染，项目较大会产生重复代码，降低性能 1234567891011121314const App = () =&gt; ( &lt;Router&gt; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" exact component=&#123; Other &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other/:userId\" component=&#123; OtherUser &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/add\" exact component=&#123; Add &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/add/:num\" component=&#123; AddNum &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/Router&gt;) 第二种方式(推荐) 通过组件的思想来实现，对应的路由嵌套到对应的页面。可以使用 match 路由属性来优化，方便代码维护 1234567891011121314151617181920212223242526const App = () =&gt; ( &lt;Router&gt; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" exact component=&#123; Other &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/Router&gt;)const Other = (&#123;match&#125;) =&gt; ( &lt;div&gt; &lt;Switch&gt; &lt;Route path=&#123;match.path&#125; exact render=&#123;() =&gt; &lt;h3&gt;地址栏输入ID&lt;/h3&gt; /&gt; &lt;Route path=&#123;`$&#123;match.path&#125;/:id`&#125; component=&#123; User &#125; /&gt; &lt;/Switch&gt; &lt;/div&gt;)const User = (&#123;match&#125;) =&gt; ( &lt;div&gt; user id &#123;match.params.id&#125; &lt;/div&gt;)","categories":[],"tags":[{"name":"react","slug":"react","permalink":"https://bluebookmarks.github.io/tags/react/"}]}]}