{"meta":{"title":"书签","subtitle":"博客","description":"心如花木，向阳而生","author":"在下AKK","url":"https://bluebookmarks.github.io","root":"/"},"pages":[{"title":"","date":"2019-12-24T08:57:17.395Z","updated":"2019-12-24T08:57:17.395Z","comments":false,"path":"tags/index.html","permalink":"https://bluebookmarks.github.io/tags/index.html","excerpt":"","text":""},{"title":"404 该页面无法找到","date":"2019-12-25T03:35:36.231Z","updated":"2019-12-25T03:35:36.231Z","comments":true,"path":"404.html","permalink":"https://bluebookmarks.github.io/404.html","excerpt":"","text":"var QZONE = window.QZONE || {}; function imagezoom(imgobj, box_w, box_h) { var src_w = imgobj.width; var src_h = imgobj.height; var r1 = src_w / src_h, r2 = box_w / box_h; var dst_w, dst_h; if (r1 > r2) { dst_w = box_w; dst_h = Math.round(dst_w / src_w * src_h); } else { if (r1 < r2) { dst_h = box_h; dst_w = Math.round(dst_h / src_h * src_w); } else { dst_w = box_w; dst_h = box_h; } } imgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\"; imgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\"; imgobj.style.width = dst_w + \"px\"; imgobj.style.height = dst_h + \"px\"; imgobj.style.opacity = 1; } (function(_w, _d) { var ha = _d.head || _d.getElementsByTagName(\"head\")[0]; var $scope = {}; var current; var tmnow; var chId; var homePageUrl, homePageName; var scs = document.getElementsByTagName(\"script\"); if (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\"; homePageUrl = \"http://fm.qq.com\"; } else { if (location.href.indexOf(\"qzone.qq.com\") > -1) { homePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\"; homePageUrl = \"http://qzone.qq.com\"; } else { homePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\"; homePageUrl = \"http://www.qq.com\"; } } for (var i = 0;i < scs.length;i++) { if (scs[i].src.indexOf(\"404/search_children.js\") > -1) { if (scs[i].getAttribute(\"homePageUrl\")) { homePageUrl = scs[i].getAttribute(\"homePageUrl\"); } if (scs[i].getAttribute(\"homePageName\")) { homePageName = scs[i].getAttribute(\"homePageName\"); } break; } } $scope.rettext = homePageName; $scope.retlink = homePageUrl; function getData(srcUrl, callback) { var sc = _d.createElement(\"script\"); function orc() { if (sc.readyState === \"loaded\") { setTimeout(function() { callback && callback(); }, 0); } } if (sc.addEventListener) { if (callback) { sc.addEventListener(\"load\", callback, false); } } else { sc.attachEvent(\"onreadystatechange\", orc); } ha && ha.appendChild(sc); sc.src = srcUrl; } function resolveData(d) { var tid, len, ddata = [], tdata; if (\"object\" == typeof d && (d.data && (len = d.data.length))) { for (var i = 0;i < len;i++) { var expire = d.data[i].expire; d.data[i]._id = new Date * Math.random() * Math.random() * 1E7; if (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) { var _c = d.data[i].city, _p = d.data[i].province; if (_c && city) { if ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) { ddata.push(d.data[i]); continue; } } if (_p && province) { if ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) { ddata.push(d.data[i]); } } } } tid = Math.floor(Math.random() * (ddata.length || len)); tdata = (ddata.length ? ddata : d.data)[chId = tid]; if (_w.foundjsondata) { tdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\"; tdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\"; tdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) { return \"#p=\" + (+n + 1); }); return format(tmpl2, tdata); } if (!tdata.ext1) { tdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\"; } return tdata; } } function setTopData(tdata) { current = tdata; $scope.topname = tdata.name; $scope.topgender = tdata.sex; $scope.topbirth = tdata.birth_time; $scope.toplostdate = tdata.lost_time; $scope.toplostplace = tdata.lost_place; $scope.toplostdesc = tdata.child_feature; $scope.toplink = tdata.url; $scope.topimg = tdata.child_pic; $scope.topid = tdata._id; document.body.innerHTML = template(\"body\", $scope); } function init(data) { tmnow = data.tm_now * 1E3; var tdata = resolveData(jsondata); $scope.whichin = 0; jsondata.data.splice(chId, 1); $scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5)); setTopData(tdata); } var timeout; window._Callback = function(d) { clearTimeout(timeout); init(d); }; timeout = setTimeout(function() { _Callback({tm_now:(new Date).getTime() / 1E3}); }, 2E3); _w.share = function(target) { var summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\"); if (summary) { summary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary; } var stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\"; var desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\"; var encode = encodeURIComponent; var opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url}; var surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", origin_url = opts.origin_url || \"http://www.qq.com/404/\"; var shareList = {weibo:{method:function(evt) { var w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, qzone:{method:function(evt) { var buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site}; for (var k in ps) { buff.push(k + \"=\" + encode(ps[k] || \"\")); } var w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\"); }}, sina:{method:function() { var w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\"); openit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\"); }}, kaixin:{method:function() { var n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary); openit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\"); }}, renren:{method:function() { var n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\"); if (p) { p.focus(); } }}, weixin:{method:function() { var n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\"); if (p) { p.focus(); } }}}; var openit = function(u, n, p) { function o() { var z; if (!(z = window.open(u, n, p))) { location.href = u; } else { z.focus(); } } o(); }; shareList[target] && shareList[target].method(); }; _w.toThis = function(id) { for (var i = 0;i < $scope.otherdata.length;i++) { if ($scope.otherdata[i]._id == id) { setTopData($scope.otherdata[i]); break; } } return false; }; var meta = document.createElement(\"meta\"); meta.name = \"viewport\"; meta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"; ha.appendChild(meta); (function registerStyle() { var link = document.createElement(\"link\"); link.rel = \"stylesheet\"; link.type = \"text/css\"; link.href = \"https://qzone.qq.com/gy/404/style/404style.css\"; ha.appendChild(link); })(); (function initStat() { var qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i; function cb() { var url = location.host; var src = \"\"; if (qzoneDomainNameRE.test(url)) { src = \"new404.qzone\"; } else { if (qqDomainNameRE.test(url)) { src = \"new404.qq\"; } else { if (qzsDomainNameRE.test(url)) { src = \"new404.qzonestyle\"; } else { src = url.replace(\".\", \"_\"); } } } _w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src)); } getData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb); })(); })(window, document); !function() { function a(a, b) { return(/string|function/.test(typeof b) ? h : g)(a, b); } function b(a, c) { return \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a; } function c(a) { return l[a]; } function d(a) { return b(a).replace(/&(?![\\w#]+;)|[\"']/g, c); } function e(a, b) { if (m(a)) { for (var c = 0, d = a.length;d > c;c++) { b.call(a, a[c], c, a); } } else { for (c in a) { b.call(a, a[c], c); } } } function f(a, b) { var c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b; for (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) { e = e.replace(c, \"/\"); } return e; } function g(b, c) { var d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"}); return c ? d(c) : d; } function h(a, b) { if (\"string\" == typeof b) { var c = b; b = function() { return new k(c); }; } var d = j[a] = function(c) { try { return new b(c, a) + \"\"; } catch (d) { return i(d)(); } }; return d.prototype = b.prototype = n, d.toString = function() { return b + \"\"; }, d; } function i(a) { var b = \"{Template Error}\", c = a.stack || \"\"; if (c) { c = c.split(\"\\n\").slice(0, 2).join(\"\\n\"); } else { for (var d in a) { c += \"\\n\" + a[d] + \"\\n\\n\"; } } return function() { return \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b; }; } var j = a.cache = {}, k = this.String, l = {\"\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) { return \"[object Array]\" === {}.toString.call(a); }, n = a.utils = {$helpers:{}, $include:function(a, b, c) { return a = f(c, a), g(a, b); }, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers; a.get = function(a) { return j[a.replace(/^\\.\\//, \"\")]; }, a.helper = function(a, b) { o[a] = b; }, \"function\" == typeof define ? define(function() { return a; }) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) { var b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\"); return r += ' 404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01 ', r += c(e), r += ' ', r += c(h), r += '(', r += c(i), r += ') \\u51fa\\u751f\\u65e5\\u671f\\uff1a', r += c(j), r += ' \\u5931\\u8e2a\\u65f6\\u95f4\\uff1a', r += c(l), r += ' \\u5931\\u8e2a\\u5730\\u70b9\\uff1a', r += c(m), r += ' \\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a', r += c(n), r += ' \\u67e5\\u770b\\u8be6\\u60c5 \\u5206\\u4eab \\u817e\\u8baf\\u5fae\\u535a QQ\\u7a7a\\u95f4 \\u65b0\\u6d6a\\u5fae\\u535a \\u5fae\\u4fe1 ', p(q, function(a) { r += ' '; }), r += \" \", new k(r); }); }();"}],"posts":[{"title":"JS骚操作","slug":"JS骚操作","date":"2020-07-03T06:21:37.000Z","updated":"2020-09-08T04:39:52.399Z","comments":true,"path":"2020/07/03/JS骚操作/","link":"","permalink":"https://bluebookmarks.github.io/2020/07/03/JS%E9%AA%9A%E6%93%8D%E4%BD%9C/","excerpt":"看见大佬们的代码，总结和搬运了些骚操作","text":"看见大佬们的代码，总结和搬运了些骚操作 位运算操作 左移运算符快速算出2的次方 12341 &lt;&lt; 2 // 4 2的2次方1 &lt;&lt; 10 // 1024 2的10次方/* !注意 */1 &lt;&lt; 32 // -2147483648 超出精度 使用 ^ 切换变量 0 或 1 1234// 三目运算toggle = toggle ? 0 : 1// ^toggle ^= 1 使用 ~~ 切换布尔值为 0 或 1 12~~true // 1~~false // 0 使用 + 改变string为number 1+'100' // 100 使用 !! 将数字转为布尔值 12!!0 // false!!2 // true 使用~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|来取整 12345~~4.51 // 44.51 &gt;&gt; 0 // 44.51 &lt;&lt; 0 // 44.51 | 0 // 44.51 &gt;&gt;&gt; 0 // 4 负数无效 使用 ^ 来完成值交换 123456789let a = 7let b = 1a ^= bb ^= aa ^= bconsole.log(a, b) // 1, 7ES6解构[a, b] = [b, a] 使用 ^ 判断正负数 12(1 ^ a) &gt; 0 // 为true是正数(-1 ^ a) &gt; 0 // 为true是负数 使用 ^ 来检查数字是否不相等 123a = 7a !== 7 // falsea ^ 7 // 0 使用 A + 0.5 | 0 来替代 Math.round() 123a = 7a !== 7 // falsea ^ 7 // 0","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://bluebookmarks.github.io/tags/javascript/"}]},{"title":"查漏补缺","slug":"查漏补缺","date":"2020-05-21T01:57:08.000Z","updated":"2020-09-14T01:26:02.966Z","comments":true,"path":"2020/05/21/查漏补缺/","link":"","permalink":"https://bluebookmarks.github.io/2020/05/21/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/","excerpt":"记录我的一些问题","text":"记录我的一些问题 JS篇1. 作用域作用域是在运行代码中特定部分中的变量，函数和对象的可访问性。作用域决定了代码区块中变量和资源的可见性。作用域最大的作用就是隔离变量，不同作用域下的同名变量不会有冲突。 全局作用域：是指声明最外层的变量和末定义直接赋值的变量 函数作用域：是指声明在函数内部的变量 块级作用域：块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问 2. 作用域链在内部引用的变量一层一层的寻找对应的值，这种层层关系就是作用域链。作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。 3. 执行上下文JS属于解释型语言，javascript的执行分为：解释和执行 执行上下文是函数执行之前创建的。代码运行时产生对应的执行环境，在这个环境中所有的变量（变量提升，函数提升）会被先提出来，有赋值直接赋值，无赋值为undefine，代码从上而下执行，这就是执行上下文。 函数提升的优先级大于变量提升 解释阶段 词法分析 语法分析 确定作用域 执行阶段 创建执行上下文 执行函数代码 垃圾回收 4. 如何理解thisthis永远指向最后调用它的那个对象 5. 什么是防抖和节流，请用代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 防抖函数（非立即执行） * 多次操作只执行满足一定时间限制的条件操作 * @param &#123;function&#125; func * @param &#123;number&#125; time */const debounce = (func, time) =&gt; &#123; let timeOver = null return () =&gt; &#123; let self = this let args = arguments timeOver &amp;&amp; clearTimeout(timeOver) timeOver = setTimeout(() =&gt; &#123; func.apply(self, args) &#125;, time) &#125;&#125;/* 防抖函数（立即执行） */const debounce1 = (func, time) =&gt; &#123; let timeOver = null return () =&gt; &#123; let self = this let args = arguments timeOver &amp;&amp; clearTimeout(timeOver) let tagTime = !timeOver timeOver = setTimeout(() =&gt; &#123; timeOver = null &#125;, time) if (tagTime) &#123; func.apply(self, args) &#125; &#125;&#125;/** * 节流 * 一定时间内只能触发一次 * @param &#123;function&#125; func * @param &#123;number&#125; time */const throttle = (func, time) =&gt; &#123; let timeOver = null return () =&gt; &#123; let self = this let args = arguments if (timeOver) return false timeOver = setTimeout(() =&gt; &#123; func.apply(self, args) timeOver = null &#125;, time) &#125;&#125; 6. call, apply, bind的区别，手动实现3个方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// call方法直接调用函数改变this,接受的参数call(this, arg0, arg1)Function.prototype.myCall = function (thisC, ...args) &#123; if (thisC === null || typeof thisC === undefined) &#123; thisC = window &#125; thisC.fn = this let res = thisC.fn(...args) delete thisC.fn return res&#125;// apply方法直接调用函数改变this,接收参数apply(this, [arg0, arg1])Function.prototype.myApply = function (thisC, args) &#123; if (thisC === null || typeof thisC === undefined) &#123; thisC = window &#125; thisC.fn = this let res = thisC.fn(...args) delete thisC.fn return res&#125;// bind方法返回一个绑定this的函数,接收参数为bind(this, arg0, arg1)Function.prototype.myBind = function (thisC, ...args) &#123; if (thisC === null || typeof thisC === undefined) &#123; thisC = window &#125; return function () &#123; thisC.fn = this const res = thisC.fn(...args) delete thisC.fn return res &#125;&#125;Function.prototype.myBind = function (thisC, ...args) &#123; if (thisC === null || typeof thisC === undefined) &#123; thisC = window &#125; let self = this return function () &#123; return self.apply(thisC, args) &#125;&#125; 7. new的过程123456let a = new Func(args)new =&gt; let obj = &#123;&#125; =&gt; obj._proto_ = Func.prototype =&gt; let ret = Func.call(obj, args) =&gt; return typeof ret === \"object\" ? ret : obj 创建空对象 空对象的隐式原型指向构造函数的显式原型 通过call改变对象的this指向 如果无值和不是一个对象返回空对象,有值并且是个新对象返回该对象 8. 什么是原型，原型链？原型就是继承实例上的属性的一个对象 原型可以通过_proto_属性访问原型的原型,这样一种自上而下的链式寻值关系就是原型链 9. 闭包的什么，原理是什么？能读取其他函数内部变量的函数 内层函数的函数作用域未定义值在上层的函数作用域寻找到,并其执行上层函数时,该值的引用不为0,不会被JS垃圾回收机制回收,保证内层的函数调用的值一直存储在内存中 CSS篇1. css加载会造成阻塞吗？css不会阻塞DOM树的解析，会阻塞DOM树的渲染，会阻塞JS的执行 优化方式： 压缩CSS体积 使用CDN资源 合理使用缓存机制 减少Http请求，多个CSS合并为一个 2. 有3个div，左右固定，如何实现中间自适应3. flex布局有哪些属性Webpack篇Vue篇React篇1. 什么是ref ？ref的作用是什么？2. react中如何优化性能 React.lazy 和 Suspense const A = React.lazy(() =&gt; import(&quot;component/A&quot;)) 组件首次渲染时，自动导入包含 A 组件的包 1234567891011121314import React, &#123; lazy, Suspense &#125; from 'react'const LazyAdd = lazy(() =&gt; import(\"../LazyAdd\"))const MyPage = () =&gt; &#123; return &lt;div&gt; 懒加载组件 &lt;Suspense fallback=&#123;&lt;div&gt;loading...&lt;/div&gt;&#125;&gt; &lt;LazyAdd /&gt; &lt;/Suspense&gt; &lt;/div&gt;&#125;export default MyPage Suspense的fallback属性可以添加JSX,在加载过程中所展示的视图属性 优化点: 添加错误边界使模块加载失败变的可控 1234567891011121314151617181920212223242526import React, &#123; Component &#125; from 'react'export default class ErrorBoundary extends Component &#123; constructor (props) &#123; super(props) this.state = &#123; hasError: false &#125; &#125; static getDerivedStateFromError () &#123; return &#123; hasError: true &#125; &#125; componentDidCatch (error, errInfo) &#123; console.log(error, errInfo) &#125; render() &#123; if (this.state.hasError) &#123; return &lt;h1&gt;页面加载错误&lt;/h1&gt; &#125; return this.props.children &#125;&#125; 它可以监听错误,并展示提示信息 1234567render() &#123; return &lt;ErrorBoundary&gt; &lt;Suspense fallback=&#123;&lt;div&gt;loading...&lt;/div&gt;&#125;&gt; &lt;LazyAdd /&gt; &lt;/Suspense&gt; &lt;/ErrorBoundary&gt;&#125; shouldComponentUpdate 只有update值改变时才会触发组件的视图层更新,可以减少频繁变动的值,对组件多次渲染带来的性能问题 123456shouldComponentUpdate (nextProps) &#123; if (this.props.update !== nextProps.update) &#123; return true &#125; return false&#125; React.PureComponent 这个组件更新渲染机制为浅比较,数组的直接push,和对象的直接新增都不会触发到组件的渲染机制 3. React多级传递 Context - ES6篇1. 箭头函数的this指向箭头函数的this指向的是函数定义时的,不是执行时的this 箭头函数中没有this绑定,必须查找其作用域链来决定其值,如果箭头函数被非箭头函数包裹,那么它的this绑定的是最近一层的非箭头函数的this 2. 手写一个Promise3. async,promise的区别4. es6新加的数组方法5. var,let,const的区别6. JS的基本类型(包括新增)Typescript篇","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://bluebookmarks.github.io/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"create-react-app中使用typescript","slug":"create-react-app中使用typescript","date":"2020-04-25T06:46:56.000Z","updated":"2020-07-03T06:05:30.562Z","comments":true,"path":"2020/04/25/create-react-app中使用typescript/","link":"","permalink":"https://bluebookmarks.github.io/2020/04/25/create-react-app%E4%B8%AD%E4%BD%BF%E7%94%A8typescript/","excerpt":"记录下在create-react-app中使用typescript的过程","text":"记录下在create-react-app中使用typescript的过程 环境和安装 安装create-react-app npm install -g create-react-app 使用create-react-app构建项目 npx create-react-app 项目名称 --typescript 加上 --typescript 是通过ts来构建项目 已有的 create-react-app 项目可通过 12345npm install --save typescript @types/node @types/react @types/react-dom @types/jest# 或者yarn add typescript @types/node @types/react @types/react-dom @types/jest 添加typescript 在typescript中引入react-router-dom需要安装2个依赖包 yarn add --dev react-router-dom @types/react-router-dom react-router-dom 这个包是react-router的核心包 @types/react-router-dom 这个包是typescript的声明文件 之后就可以在项目中使用 123456import &#123; BrowserRouter as Router, Route, Switch, Redirect&#125; from 'react-router-dom' 第三方包的引入大多数的第三方包没有Ts类型文件 在编辑器中会报警告 无法找到模块“xxx”的声明文件 这里我们需要在xx.d.ts文件中声明 1234declare module 'xx' &#123; const moduleName: any export default moduleName&#125; 声明他其中的类型都为 any 或者 模块的应该有的类型","categories":[],"tags":[{"name":"react","slug":"react","permalink":"https://bluebookmarks.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"https://bluebookmarks.github.io/tags/typescript/"}]},{"title":"使用hexo搭建博客","slug":"使用hexo搭建博客","date":"2020-01-12T06:50:05.000Z","updated":"2020-04-24T07:43:15.260Z","comments":true,"path":"2020/01/12/使用hexo搭建博客/","link":"","permalink":"https://bluebookmarks.github.io/2020/01/12/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"那个男孩子不想拥有一个个人博客（还是免费的） 现在有很多第三方博客网站，掘金，简书，csdn等，今天就来搭建一个个人的博客网站，基于Github Page，国内可以通过码云，coding等网站托管，操作步骤大体相同。","text":"那个男孩子不想拥有一个个人博客（还是免费的） 现在有很多第三方博客网站，掘金，简书，csdn等，今天就来搭建一个个人的博客网站，基于Github Page，国内可以通过码云，coding等网站托管，操作步骤大体相同。 目录 环境要求 安装Hexo Github设置 配置 SSH key 部署到Github 写博客 图床推荐 接入腾讯公益404 环境要求需要 node 和 git 环境 node中文网 http://nodejs.cn/ git教程和使用参考廖雪峰的教程 git教程 安装HexoHexo官网 https://hexo.io/zh-cn/ 全局安装 hexo npm install hexo-cli -g 创建 hexo 项目 123hexo init blogcd blognpm i 项目目录和运行 创建后的项目目录 1234567├── _config.yml # 网站的配置信息├── package.json├── scaffolds # 模版文件夹├── source # 资源文件夹| ├── _drafts # 草稿文件夹| └── _posts # 博客文章Markdowm└── themes # 主题文件夹 本地运行命令 hexo s 浏览器打开http://localhost:4000 就可以看到效果 Github设置Github上新建一个项目 项目名必须为 github用户名.github.io 创建完成后 在根目录添加一个index.html，随便编辑一些东西 然后打开 http://你的用户名.github.io 就可以看到你写的东西了 配置 SSH key使用hexo自动部署需要使用SSH key 查看是否生成过打开cmd输入 cd ~/.ssh 没报错说明以前生成过直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 以前未生成过SSH key 全局配置git账号 12git config --global user.name \"用户名\"git config --global user.email \"邮箱地址\" 开始生成 SSH key ssh-keygen -t rsa -C &#39;邮箱地址&#39; 返回 Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 说明添加SSH成功 添加SSH key 到 Github 部署到Github官方部署文档 部署文档 配置_config.yml 文件参数 12345deploy: type: git repo: github: https://github.com/用户名/用户名.github.io branch: 分支名字 要安装一个部署插件 hexo-deployer-git npm install hexo-deployer-git --save 执行命令部署上传 hexo g -d 打开你的博客地址 写博客官网写作文档 https://hexo.io/zh-cn/docs/writing 如果你不会 markdown 的书写，请先阅读 菜鸟教程 | Markdown 教程 新建文章 hexo new &#39;文章标题&#39; 文章目录 新建的文章在 /source/_posts 中查看到 本地运行查看 12hexo ghexo s 就可以看到你写的博客 最后，部署项目 12hexo cleanhexo g -d 运行 hexo clean 为了清除缓存文件和已生成的静态文件，尤其是更换主题后需要执行一次 图床推荐上传到图床后可以直接到md文件中引用 (转载自知乎：https://zhuanlan.zhihu.com/p/35270383?ivk_sa=1023345p) 选几个我常用的来列举，上面链接里有更多的图床介绍 七牛云 注册认证后有10G永久免费空间，每月10G国内和10G国外流量，速度相当快，七牛云是国内专业CDN服务商，插件支持比较多，有免费ssl证书，但https流量收费 注意：七牛云30天后会回收测试域名，因此你必须要绑定自己的已备案的域名 公益图床 长期保存需要注册使用，这个图床服务器在国内应该还用了cdn，总之速度非常快 路过图床 支持免注册上传图片，永久存储，支持HTTPS加密访问和调用图片，提供多种图片链接格式，成立于2011年 限制：最大10M 聚合图床 将图片分发到多处备份，借助其本身的CDN加速功能，节省服务器流量，并且不用担心图片被删除，即便其中某几个图床上的图片被删除了，还有其他备份，保证万无一失，支持匿名和注册管理 接入腾讯公益404公益404网站 https://www.qq.com/404/ 在 /source 根目录下建立 404.html 接入公益404JS文件，修改跳转到自己的博客主页 结束语到这一个基本框架的博客就搭建好了，想要自己想要的功能和主题可以阅读Hexo的官方文档来修改和定制。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://bluebookmarks.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://bluebookmarks.github.io/tags/github/"}]},{"title":"vscode插件整理","slug":"vscode插件整理","date":"2019-12-25T08:22:09.000Z","updated":"2019-12-25T09:22:17.055Z","comments":true,"path":"2019/12/25/vscode插件整理/","link":"","permalink":"https://bluebookmarks.github.io/2019/12/25/vscode%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/","excerpt":"一个完美的编辑器插件可以帮助程序猿快出写出BUG而且表面看不出问题来 ๑乛◡乛๑ —— 在下AKK","text":"一个完美的编辑器插件可以帮助程序猿快出写出BUG而且表面看不出问题来 ๑乛◡乛๑ —— 在下AKK 整理一下我常用的vscode插件 基础类Auto Close Tag自动闭合标签，提升效率的利器，react，vue亲测可用 Auto Rename Tag改变标签时，自动改变对应的开始闭合标签，不用找过来找过去 Code Runner无需html也可以运行js，ts。还可以运行node，java，python，php…代码（需要对应的环境） Code Spell Checker代码英文检测，助你写出正确的英文命名变量（例：写出frist会标出错误，并提供正确的修复） Color Info在颜色光标上悬停可出现色彩模型 ESLinteslint检测，可以帮助你写出符合团队规范的代码 filesize查看你代码文件的大小 GitLens — Git supercharged非常重要的git插件，可以让你清楚的知道git上代码的提交历史，修改信息，操作人员（甩锅必备） HTML CSS Supporthtml标签上写class智能提示项目所支持的样式 HTML SnippetsH5代码片段以及提示 Live Server可以开启本地服务器，方便调试 markdownlintmarkdown文件的规则检测，助你写出一份标准的markdown Path Intellisense文件索引插件，帮助你快速写出正确的文件路径 Prettier - Code formatter代码美化插件，一键美化 px2vw一个自动把 px 单位转成 vw 单位的 VSCode 插件，写H5必备 React Native Tools在vscode 上调试 React Native 的插件 Settings Sync上传本地配置，插件列表到github上保存，即使更换电脑可以快速同步设置和插件（需要Github Token） stylelint检测css的规则，确保你写出的是正确和标准的CSS TSLint检测Ts的规则，助你写出标准的TS代码 ReactES7 React/Redux/GraphQL/React-Native snippets写 React/Redux/React-Native 时可以通过简写快速生成对应的模板 imr → import React from &#39;react&#39; imrn → import { $1 } from &#39;react-native&#39; VueVetur写vue必备，代码自动补全，错误提示，语法高亮 美化插件文件图标类 Material Icon Theme 扁平风的文件图标 vscode-icons 超级多的图标，可以自己定制 主题 Noctis 超级多的配色 One Dark Pro 很火的一个主题，深色主题 + 代码配色 很舒服 其他LeetCode在 VS Code 中练习 LeetCode，闲来无事可以在vscode上刷算法题","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://bluebookmarks.github.io/tags/vscode/"}]},{"title":"vscode中调试typescript","slug":"vscode中调试typescript","date":"2019-12-25T07:38:31.000Z","updated":"2019-12-25T07:47:12.544Z","comments":true,"path":"2019/12/25/vscode中调试typescript/","link":"","permalink":"https://bluebookmarks.github.io/2019/12/25/vscode%E4%B8%AD%E8%B0%83%E8%AF%95typescript/","excerpt":"vscode中调试typescript","text":"vscode中调试typescript 目录 依赖包 配置tsconfig.json 配置launch.json 开始调试 依赖包123456&#x2F;&#x2F; npm安装npm i typescriptnpm i ts-node&#x2F;&#x2F; yarn安装yarn add typescriptyarn add ts-node 配置tsconfig.json 初始化tsconfig.json tsc --init 配置tsconfig.json 123456789101112&#123; \"compilerOptions\": &#123; \"module\": \"commonjs\", \"target\": \"es5\", \"noImplicitAny\": true, \"outDir\": \"./dist\", \"sourceMap\": true &#125;, \"include\": [ \"src/**/*\" ]&#125; 配置launch.json 打开调试 alt + D 选择添加配置 编辑launch.json 12345678910111213141516&#123; \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Current TS File\", \"type\": \"node\", \"request\": \"launch\", \"program\": \"$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/bin.js\", \"args\": [ \"$&#123;relativeFile&#125;\" ], \"cwd\": \"$&#123;workspaceRoot&#125;\", \"protocol\": \"inspector\" &#125; ]&#125; 开始调试 打开对应的ts文件 打开调试 alt + D 选择启动调试","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://bluebookmarks.github.io/tags/vscode/"},{"name":"typescript","slug":"typescript","permalink":"https://bluebookmarks.github.io/tags/typescript/"}]},{"title":"react-router","slug":"react-router","date":"2019-12-25T02:43:12.000Z","updated":"2019-12-25T03:00:28.541Z","comments":true,"path":"2019/12/25/react-router/","link":"","permalink":"https://bluebookmarks.github.io/2019/12/25/react-router/","excerpt":"React Router 是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。","text":"React Router 是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。 目录react-router-dom 安装react-router-dom 使用react-router-dom 使用嵌套路由 react-router-domreact-router-dom 是 react-router v4 的 web 版本 v4 和 v2, v3的区别为 v4版本把路由拆分为组件的形式可在各个模块中调用 v2/v3 123456&lt;Router history=&#123;browserHistory&#125;&gt; &lt;Route path=\"/\" component=&#123;Home&#125;&gt; &lt;IndexRoute component=&#123;HomePage&#125; /&gt; &lt;Route path=\"/users\" component=&#123;UsersPage&#125; /&gt; &lt;/Route&gt;&lt;/Router&gt; v4 123456789101112&#123;/* App.js */&#125;&lt;BrowserRouter&gt; &lt;Home /&gt;&lt;/BrowserRouter&gt;&#123;/* Home.js */&#125;&lt;div&gt; &lt;div className=\"pages\"&gt;page: &lt;Route path=\"/\" exact component=&#123;HomePage&#125; /&gt; &lt;Route path=\"/users\" component=&#123;UsersPage&#125; /&gt; &lt;/div&gt;&lt;/div&gt; 1. 安装react-router-dom命令 yarn add react-router-dom --dev || npm i react-router-dom -S 2. 使用react-router-dom12345678910111213141516171819202122232425262728293031323334import React from 'react'import &#123; BrowserRouter as Router, Route, Link, Switch, Redirect&#125; from 'react-router-dom'import Index from './pages/Index'import Other from './pages/Other'const App = () =&gt; ( &lt;Router&gt; &lt;div className=\"App\"&gt; 点击位置： &lt;ul&gt; &#123;/* link 跳转标签 */&#125; &lt;li&gt;&lt;Link to=\"/\"&gt;首页&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=\"/other\"&gt;其他&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; 当前页面： &#123;/* Switch 只渲染一个路由 */&#125; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" component=&#123; Other &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/div&gt; &lt;/Router&gt;)export default App v4 版本则有了一个包含的关系：如匹配 path=”/users” 的路由会匹配 path=”/“的路由，在页面中这两个模块会同时进行渲染。因此，v4中多了 exact 关键词，表示只对当前的路由进行匹配 &lt;Switch&gt;只有一个路由会被渲染，并且总是渲染第一个匹配到的组件。（PS: 在第一个路由中，还是需要使用 exact，否则，当我们渲染 ‘/other’ 或 ‘/other/page’ 时，只会显示匹配 ‘/‘ 的组件。） &lt;Redirect&gt; 组件，单独使用时，一旦当路由匹配到的时候，浏览器就会进行重定向跳转；而配合 &lt;Switch&gt; 使用时，只有当没有路由匹配的时候，才会进行重定向。 （eg： 跳转-&gt; /error 未定义重定向 -&gt; /） v4版本废弃掉&lt;IndexRoute&gt;使用&lt;Route&gt;中的exact关键词代替 3. 使用嵌套路由第一种方式（不推荐） 这种方式很冗余，渲染时要把整体通用部分重复渲染，项目较大会产生重复代码，降低性能 1234567891011121314const App = () =&gt; ( &lt;Router&gt; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" exact component=&#123; Other &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other/:userId\" component=&#123; OtherUser &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/add\" exact component=&#123; Add &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/add/:num\" component=&#123; AddNum &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/Router&gt;) 第二种方式(推荐) 通过组件的思想来实现，对应的路由嵌套到对应的页面。可以使用 match 路由属性来优化，方便代码维护 1234567891011121314151617181920212223242526const App = () =&gt; ( &lt;Router&gt; &lt;Switch&gt; &#123;/* exact 只对当前路由匹配 */&#125; &lt;Route exact path=\"/\" component=&#123; Index &#125;&gt;&lt;/Route&gt; &lt;Route path=\"/other\" exact component=&#123; Other &#125;&gt;&lt;/Route&gt; &#123;/* 重定向 输入不存在的路径时跳转 */&#125; &lt;Redirect to=\"/\" /&gt; &lt;/Switch&gt; &lt;/Router&gt;)const Other = (&#123;match&#125;) =&gt; ( &lt;div&gt; &lt;Switch&gt; &lt;Route path=&#123;match.path&#125; exact render=&#123;() =&gt; &lt;h3&gt;地址栏输入ID&lt;/h3&gt; /&gt; &lt;Route path=&#123;`$&#123;match.path&#125;/:id`&#125; component=&#123; User &#125; /&gt; &lt;/Switch&gt; &lt;/div&gt;)const User = (&#123;match&#125;) =&gt; ( &lt;div&gt; user id &#123;match.params.id&#125; &lt;/div&gt;)","categories":[],"tags":[{"name":"react","slug":"react","permalink":"https://bluebookmarks.github.io/tags/react/"}]}]}